
/*!
 * Mesh v1.0.6
 *
 * Copyright 2011 Maxwell Barvian
 * Licensed under the GNU General Public License
 * http://www.gnu.org/licenses/gpl.html
 */

// Configuration
$desktop-columns: 12 !default; // the number of columns in your grid
$tablet-columns: 12 !default; // the number of columns in your grid
$handheld-columns: 12 !default; // the number of columns in your grid
//$column-width: 60 !default;

$gutter-width: 10 !default;
$max-desktop-width: 1140px + $gutter-width !default;
$max-tablet-landscape-width: 960px !default;
$max-tablet-width: 768px !default;
$max-handheld-landscape-width: 420px !default;
$max-handheld-width: 300px !default;

// Handheld
$grid-h-width: $max-handheld-width - $gutter-width;
$column-h-width: ($grid-h-width - ($gutter-width * $handheld-columns)) / $handheld-columns;
// Handheld Landscape
$grid-hl-width: $max-handheld-landscape-width - $gutter-width;
$column-hl-width: ($grid-hl-width - ($gutter-width * $handheld-columns)) / $handheld-columns;
// Tablet
$grid-t-width: $max-tablet-width - $gutter-width;
$column-t-width: ($grid-t-width - ($gutter-width * $tablet-columns)) / $tablet-columns;
// Tablet Landscape
$grid-tl-width: $max-tablet-landscape-width - $gutter-width;
$column-tl-width: ($grid-tl-width - ($gutter-width * $tablet-columns)) / $tablet-columns;
// Desktop
$grid-d-width: $max-desktop-width - $gutter-width;
$column-d-width: ($grid-d-width - ($gutter-width * $desktop-columns)) / $desktop-columns;

$total-h-width:  $grid-h-width;
$total-hl-width: $grid-hl-width;
$total-t-width:  $grid-t-width;
$total-tl-width: $grid-tl-width;
$total-d-width:  $grid-d-width;


body {
	width: 100%;
}

#page {
	margin: 0 auto;
}

@mixin clearfix() {
*zoom:1;

&:before,
&:after {
content:"";
display:table;
}
&:after {
clear:both;
}
}

.row {
	@include clearfix();
}

// Create the Handheld columns
$_allColumns-h: "";
@for $col from 1 to ($handheld-columns + 1) {
	@if $_allColumns-h == "" {
		$_allColumns-h: ".g-h-#{$col}";
	} @else {
		$_allColumns-h: $_allColumns-h + ", .g-h-#{$col}";
	}
	@if $_allColumns-h == "" {
		$_allColumns-h: ".g-hl-#{$col}";
	} @else {
		$_allColumns-h: $_allColumns-h + ", .g-hl-#{$col}";
	}
}

// Create the Desktop columns
$_allColumns-t: "";
@for $col from 1 to ($tablet-columns + 1) {
	@if $_allColumns-t == "" {
		$_allColumns-t: ".g-t-#{$col}";
	} @else {
		$_allColumns-t: $_allColumns-t + ", .g-t-#{$col}";
	}
	@if $_allColumns-t == "" {
		$_allColumns-t: ".g-tl-#{$col}";
	} @else {
		$_allColumns-t: $_allColumns-t + ", .g-tl-#{$col}";
	}
}

// Create the Desktop columns
$_allRows-d: "";
@for $col from 1 to ($tablet-columns + 1) {
	@if $_allRows-d == "" {
		$_allColumns-d: ".g-dr-#{$col}";
	} @else {
		$_allRows-d: $_allRows-d + ", .g-dr-#{$col}";
	}
}

// Create the Desktop columns
$_allColumns-d: "";
@for $col from 1 to ($desktop-columns + 1) {
	@if $_allColumns-d == "" {
		$_allColumns-d: ".g-d-#{$col}";
	} @else {
		$_allColumns-d: $_allColumns-d + ", .g-d-#{$col}";
	}
}

#{$_allColumns-d}, #{$_allColumns-t}, #{$_allColumns-h} {
	@include box-sizing(border-box);
}

// Utility variable — you should never need to modify this
$grid-system-h-width: ($column-h-width*$handheld-columns) + ($gutter-width*$handheld-columns);

// Set $total-width to 100% for a fluid layout
$total-width: $grid-system-h-width;


@for $col from 1 to ($handheld-columns + 1) {
.g-h-r#{$col} {
width: $total-width*(($gutter-width + $grid-system-h-width)/$grid-system-h-width) - $gutter-width;
margin: 0 $total-width*((($gutter-width*.5)/$grid-system-h-width)*-1);
@include clearfix();
}
}

@for $col from 1 to ($handheld-columns + 1) {
.g-h-#{$col} {
display: inline;
float: left;
width: $total-width*(((($gutter-width+$column-h-width)*$col)-$gutter-width) / $grid-system-h-width);
margin: 0 $total-width*(($gutter-width*.5)/$grid-system-h-width);
}
}

@for $col from 1 to ($handheld-columns + 1) {
.g-h-o#{$col} {
	margin-left: ($total-width*(((($gutter-width+$column-h-width)*$col)-$gutter-width) / $grid-system-h-width)) + ($total-width*(($gutter-width)/$grid-system-h-width));
}
}

#{$_allColumns-d}, #{$_allColumns-t}, #{$_allColumns-h} {
display: inline;
float: left;  // enforces implicit display: block
overflow: hidden;
}


// Handheld Portrait
//@media only screen and (max-width: 479px) {
body{}
#page {
width: $max-handheld-width;
//	border: 1px solid #ccc;
}

.row {
width: $total-width*(($gutter-width + $grid-system-h-width)/$grid-system-h-width) - $gutter-width;
margin: 0 $total-width*((($gutter-width*.5)/$grid-system-h-width)*1);
@if $show-grid-background {
	$grid-background-total-columns: $handheld-columns;
	$grid-background-offset: 4px;
	$grid-background-column-width: $column-h-width;
	$grid-background-gutter-width: $gutter-width;
	$grid-background-baseline-height: $base-line-height;
	@include grid-background;
	}
}

//}

// Handheld Landscape
@media only screen and (min-width: 480px) {
	body {}
#page {
width: $max-handheld-landscape-width;
//	border: 1px solid #ccc;
}


// Disables iphone font size increase when viewing in landscape mode.
html { -webkit-text-size-adjust: none; }
body {}

// Utility variable — you should never need to modify this
$grid-system-hl-width: ($column-hl-width*$handheld-columns) + ($gutter-width*$handheld-columns);

// Set $total-width to 100% for a fluid layout
$total-width: $grid-system-hl-width;


.row {
width: $total-width*(($gutter-width + $grid-system-hl-width)/$grid-system-hl-width) - $gutter-width;
margin: 0 $total-width*((($gutter-width*.5)/$grid-system-hl-width)*1);
@if $show-grid-background {
$grid-background-total-columns: $handheld-columns;
$grid-background-offset: 4px;
$grid-background-column-width: $column-hl-width;
$grid-background-gutter-width: $gutter-width;
$grid-background-baseline-height: $base-line-height;
@include grid-background;
}
}


@for $col from 1 to ($handheld-columns + 1) {
	.g-hl-r#{$col} {
width: $total-width*(($gutter-width + $grid-system-hl-width)/$grid-system-hl-width) - $gutter-width;
margin: 0 $total-width*((($gutter-width*.5)/$grid-system-hl-width)*-1);
@include clearfix();
	}
}

@for $col from 1 to ($handheld-columns + 1) {
	.g-hl-#{$col} {
display: inline;
float: left;
width: $total-width*(((($gutter-width+$column-hl-width)*$col)-$gutter-width) / $grid-system-hl-width);
margin: 0 $total-width*(($gutter-width*.5)/$grid-system-hl-width);
	}
}

@for $col from 1 to ($handheld-columns + 1) {
	.g-hl-o#{$col} {
		margin-left: ($total-width*(((($gutter-width+$column-hl-width)*$col)-$gutter-width) / $grid-system-hl-width)) + ($total-width*(($gutter-width)/$grid-system-hl-width));
	}
}

}

// Tablet Portrait
@media only screen and (min-width: 768px) {
body{}
#page {
width: $max-tablet-width;
//	border: 1px solid #ccc;
}

// Utility variable — you should never need to modify this
$grid-system-t-width: ($column-t-width*$tablet-columns) + ($gutter-width*$tablet-columns);

// Set $total-width to 100% for a fluid layout
$total-width: $grid-system-t-width;


.row {
width: $total-width*(($gutter-width + $grid-system-t-width)/$grid-system-t-width) - $gutter-width;
margin: 0 $total-width*((($gutter-width*.5)/$grid-system-t-width)*1);
@if $show-grid-background {
	$grid-background-total-columns: $tablet-columns;
	$grid-background-offset: 4px;
	$grid-background-column-width: $column-t-width;
	$grid-background-gutter-width: $gutter-width;
	$grid-background-baseline-height: $base-line-height;
	@include grid-background;
	}
}


@for $col from 1 to ($tablet-columns + 1) {
	.g-t-r#{$col} {
width: $total-width*(($gutter-width + $grid-system-t-width)/$grid-system-t-width) - $gutter-width;
margin: 0 $total-width*((($gutter-width*.5)/$grid-system-t-width)*-1);
@include clearfix();
	}
}

@for $col from 1 to ($tablet-columns + 1) {
	.g-t-#{$col} {
display: inline;
float: left;
width: $total-width*(((($gutter-width+$column-t-width)*$col)-$gutter-width) / $grid-system-t-width);
margin: 0 $total-width*(($gutter-width*.5)/$grid-system-t-width);
	}
}

@for $col from 1 to ($tablet-columns + 1) {
	.g-t-o#{$col} {
		margin-left: ($total-width*(((($gutter-width+$column-t-width)*$col)-$gutter-width) / $grid-system-t-width)) + ($total-width*(($gutter-width)/$grid-system-t-width));
	}
}


}


// Tablet Landscape
@media only screen and (min-width: 960px) {
body{}
#page {
width: $max-tablet-landscape-width;
//	border: 1px solid #ccc;
}


// Utility variable — you should never need to modify this
$grid-system-tl-width: ($column-tl-width*$tablet-columns) + ($gutter-width*$tablet-columns);

// Set $total-width to 100% for a fluid layout
$total-width: $grid-system-tl-width;


.row {
width: $total-width*(($gutter-width + $grid-system-tl-width)/$grid-system-tl-width) - $gutter-width;
margin: 0 $total-width*((($gutter-width*.5)/$grid-system-tl-width)*1);
@if $show-grid-background {
	$grid-background-total-columns: $tablet-columns;
	$grid-background-offset: 4px;
	$grid-background-column-width: $column-tl-width;
	$grid-background-gutter-width: $gutter-width;
	$grid-background-baseline-height: $base-line-height;
	@include grid-background;
	}
}


@for $col from 1 to ($tablet-columns + 1) {
	.g-tl-r#{$col} {
width: $total-width*(($gutter-width + $grid-system-tl-width)/$grid-system-tl-width) - $gutter-width;
margin: 0 $total-width*((($gutter-width*.5)/$grid-system-tl-width)*-1);
@include clearfix();
	}
}

@for $col from 1 to ($tablet-columns + 1) {
	.g-tl-#{$col} {
display: inline;
float: left;
width: $total-width*(((($gutter-width+$column-tl-width)*$col)-$gutter-width) / $grid-system-tl-width);
margin: 0 $total-width*(($gutter-width*.5)/$grid-system-tl-width);
	}
}

@for $col from 1 to ($tablet-columns + 1) {
	.g-tl-o#{$col} {
		margin-left: ($total-width*(((($gutter-width+$column-tl-width)*$col)-$gutter-width) / $grid-system-tl-width)) + ($total-width*(($gutter-width)/$grid-system-tl-width));
	}
}


}

// Desktop
@media only screen and (min-width: 1160px) {
	body{}
	#page {
	width: $max-desktop-width;
//	border: 1px solid #ccc;
	}

// Utility variable — you should never need to modify this
$grid-system-d-width: ($column-d-width*$desktop-columns) + ($gutter-width*$desktop-columns);

// Set $total-width to 100% for a fluid layout
$total-width: $grid-system-d-width;


.row {
width: $total-width*(($gutter-width + $grid-system-d-width)/$grid-system-d-width) - $gutter-width;
margin: 0 $total-width*((($gutter-width*.5)/$grid-system-d-width)*1);
@if $show-grid-background {
	$grid-background-total-columns: $desktop-columns;
	$grid-background-offset: 4px;
	$grid-background-column-width: $column-d-width;
	$grid-background-gutter-width: $gutter-width;
	$grid-background-baseline-height: $base-line-height;
	@include grid-background;
	}
}


@for $col from 1 to ($desktop-columns + 1) {
	.g-d-r#{$col} {
width: $total-width*(($gutter-width + $grid-system-d-width)/$grid-system-d-width) - $gutter-width;
margin: 0 $total-width*((($gutter-width*.5)/$grid-system-d-width)*-1);
@include clearfix();
	}
}

@for $col from 1 to ($desktop-columns + 1) {
	.g-d-#{$col} {
display: inline;
float: left;
width: $total-width*(((($gutter-width+$column-d-width)*$col)-$gutter-width) / $grid-system-d-width);
margin: 0 $total-width*(($gutter-width*.5)/$grid-system-d-width);
	}
}

@for $col from 1 to ($desktop-columns + 1) {
	.g-d-o#{$col} {
		margin-left: ($total-width*(((($gutter-width+$column-d-width)*$col)-$gutter-width) / $grid-system-d-width)) + ($total-width*(($gutter-width)/$grid-system-d-width));
	}
}

}

